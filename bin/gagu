#!/usr/bin/env node

const http = require('http')
const fs = require('fs')
const os = require('os')
const url = require('url')
const path = require('path')


const deviceName = os.hostname()
const PORT = 9293

const server = http.createServer((req, res) => {
  const { method } = req
  const { pathname } = url.parse(req.url)

  const isRequestApi = pathname.startsWith('/api')

  if (isRequestApi) {
    res.writeHead(200, {
      'Content-Type': 'application/json',
      'Access-Control-Allow-Origin': '*',
    })

    if (pathname === '/api/root' && method === 'GET') {
      const resData = {
        deviceName,
        files: [
          {
            label: 'Root',
            name: 'root',
            mount: '',
            hasChildren: true,
            spaceFree: 12923232322,
            spaceTotal: 25698232323,
          },
          {
            label: 'PLACEHOLDER',
            name: 'PLACEHOLDER',
            mount: '/',
            hasChildren: true,
            spaceFree: 12923232322,
            spaceTotal: 25698232323,
          },
        ],
      }
      res.write(JSON.stringify(resData))
    } else if (pathname.startsWith('/api/root/')) {
      if (method === 'GET') {
        const dirPath = './' + pathname.replace('/api/root/', '')
        const entries = fs.readdirSync(dirPath)
        const resData = {
          files: entries.map(entry => {
            try {
              const stat = fs.statSync(`${dirPath}/${entry}`)
              return {
                name: entry,
                type: stat.isDirectory() ? 'directory' : 'file',
                size: stat.size,
                hidden: entry.startsWith('.'),
                lastModified: new Date(stat.birthtime).getTime(),
                hasChildren: true,
              }
            } catch (err) {
              return null
            }
          }).filter(Boolean)
        }
        console.log({ pathname, resData, dirPath, method })
        res.write(JSON.stringify(resData))
      } else if (method === 'POST') {
        res.write('test')
      } else {
        res.write('test')
      }
    } else {
      const dirs = fs.readdirSync('./')
      res.write(JSON.stringify(dirs))
    }
    res.end()
  } else {
    let targetPathName = pathname === '/'
      ? '/app/index.html'
      : pathname
    const publicFilePathname = path.join(__dirname, targetPathName)
    fs.readFile(publicFilePathname, (err, fileData) => {
      if (err) {
        res.writeHead(404)
        res.write('404 - File is not found!')
      } else {
        res.writeHead(200)
        res.write(fileData)
      }
      res.end()
    })
  }
})

server.listen(PORT)
